initSidebarItems({"macro":[["cmap","Macro for creating a `ContiguousMap`."]],"struct":[["ContiguousMap","An ordered, associative container like [`std::collections::BTreeMap`]. Additionally stores values with adjacent keys contiguously so they may be accessed as a slice."],["IntoIter","An owning iterator over all `(Key, Value)` entries in a [`ContiguousMap`] in ascending key order."],["Iter","An iterator over all `(Key, &Value)` entries in a [`ContiguousMap`] in ascending key order."],["IterMut","A mutable iterator over all `(Key, &mut Value)` entries in a [`ContiguousMap`] in ascending key order."],["IterSlice","An iterator over all the contiguous `(&Key, &[Value])` entries in a [`ContiguousMap`] in ascending key order."],["IterSliceMut","A mutable iterator over all the contiguous `(&Key, &mut [Value])` entries in a [`ContiguousMap`] in ascending key order."],["IterVec","An owning iterator over all the contiguous `(Key, Vec<Value>)` entries in a [`ContiguousMap`] in ascending key order."],["Range","An iterator over a range of `(Key, &Value)` entries in a [`ContiguousMap`] in ascending key order."],["RangeMut","An iterator over a range of `(Key, &mut Value)` entries in a [`ContiguousMap`] in ascending key order."]],"trait":[["InclusiveStartRangeBounds","Trait similar to [`std::ops::RangeBounds`] that requires an inclusive start to the range."],["Key","Trait that must be implemented for all key types used in a `ContiguousMap`."],["ToIndex","Trait to convert a type to an index that implements the [`Key`] trait."],["TryFromIndex","Trait to convert an index that implements the [`Key`] trait to a different type."]]});