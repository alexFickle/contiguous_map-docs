var searchIndex = JSON.parse('{\
"contiguous_map":{"doc":"Contains <code>ContiguousMap</code>: a map that stores values with …","t":[3,8,16,3,3,3,3,3,3,8,3,3,8,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ContiguousMap","InclusiveStartRangeBounds","Index","IntoIter","Iter","IterMut","IterSlice","IterSliceMut","IterVec","Key","Range","RangeMut","ToIndex","TryFromIndex","add_one","add_usize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear_range","clear_with_len","clone","clone_into","cmap","default","difference","end_bound","eq","fmt","from","from","from","from","from","from","from","from","from","get","get_mut","get_slice","get_slice_mut","get_slice_with_len","get_slice_with_len_mut","insert","insert_slice","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","iter_slice","iter_slice_mut","iter_vec","len","ne","new","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","num_contiguous_regions","range","range_mut","remove","start_bound","to_index","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_index","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["contiguous_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An ordered, associative container like …","Trait similar to <code>std::ops::RangeBounds</code> that requires an …","The key type used as an index for this type.","An owning iterator over all <code>(Key, Value)</code> entries in a …","An iterator over all <code>(Key, &Value)</code> entries in a …","A mutable iterator over all <code>(Key, &mut Value)</code> entries in …","An iterator over all the contiguous <code>(&Key, &[Value])</code> …","A mutable iterator over all the contiguous …","An owning iterator over all the contiguous …","Trait that must be implemented for all key types used in …","An iterator over a range of <code>(Key, &Value)</code> entries in a …","An iterator over a range of <code>(Key, &mut Value)</code> entries in …","Trait to convert a type to an index that implements the …","Trait to convert an index that implements the <code>Key</code> trait …","Gets the next adjacent key. Returns None if there is no …","Gets the key that is num steps after this key. Returns …","","","","","","","","","","","","","","","","","","","Removes all entries from this map.","Removes all entries within a range of keys.","Removes all entries starting at the provided key for the …","","","Macro for creating a <code>ContiguousMap</code>.","","Gets the difference between this key and another one. …","The end bound of this range.","","","","","","","","","","","","Returns a reference to a key’s value, if it exists.","Returns a mutable reference to a key’s value, if it …","Gets a slice from this map using a range of keys.","Gets a mutable slice from this map using a range of keys.","Gets a slice from this map using a key and a length.","Gets a mutable slice from this map using a key and a …","Inserts a value into a map with a given key. Returns the …","Inserts values into the map from a slice starting at a …","","","","","","","","","","","","","","","","","","","Gets if this map is empty.","Iteration over all keys and values in this map in …","Mutable iteration over all keys and values in this map in …","Iteration over all keys and values in this map grouped up …","Mutable iteration over all keys and values in this map …","Owning iteration over all keys and values in this map …","Gets the number of entries in this map.","","Makes a new, empty ContiguousMap.","","","","","","","","","","","","","","","","","Gets the number of contiguous regions in this map.","Iteration over a range of keys and values in this map in …","Mutable iteration over a range of keys and values in this …","Removes a key’s value in this map, returning it if it …","The inclusive starting bound of this range.","Converts self to an index.","","","","","","","","","","","Attempts to convert from an index to this type.","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,3,4,5,6,7,8,9,10,11,3,4,5,6,7,8,9,10,11,11,11,11,11,11,0,11,2,12,11,11,3,4,5,6,7,8,9,10,11,11,11,11,11,11,11,11,11,3,4,5,6,7,8,9,10,11,3,4,5,6,7,8,9,10,11,11,11,11,11,11,11,11,11,11,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,11,11,11,11,12,1,11,3,4,5,6,7,8,9,10,11,13,3,4,5,6,7,8,9,10,11,3,4,5,6,7,8,9,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rangebounds",8]]],[[["usize",15],["borrow",8]]],[[],["contiguousmap",3]],[[]],null,[[]],[[],[["usize",15],["option",4,["usize"]]]],[[],["bound",4]],[[["contiguousmap",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["borrow",8]],["option",4]],[[["borrow",8]],["option",4]],[[["inclusivestartrangebounds",8]],["option",4]],[[["inclusivestartrangebounds",8]],["option",4]],[[["usize",15],["borrow",8]],["option",4]],[[["usize",15],["borrow",8]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["iterslice",3]],[[],["iterslicemut",3]],[[],["itervec",3]],[[],["usize",15]],[[["contiguousmap",3]],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[["rangebounds",8]],["range",3]],[[["rangebounds",8]],["rangemut",3]],[[["borrow",8]],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[8,"ToIndex"],[8,"Key"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Range"],[3,"RangeMut"],[3,"IterVec"],[3,"IterSlice"],[3,"IterSliceMut"],[3,"ContiguousMap"],[8,"InclusiveStartRangeBounds"],[8,"TryFromIndex"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};